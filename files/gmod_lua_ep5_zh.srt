1
00:00:09,770 --> 00:00:12,920
大家好，欢迎收看

2
00:00:12,920 --> 00:00:14,780
GMOD LUA系列教程第五期

3
00:00:14,780 --> 00:00:17,330
在开始之前先向各位

4
00:00:17,330 --> 00:00:19,340
诚恳道歉，最近更新的并不勤快

5
00:00:19,340 --> 00:00:21,860
我感觉很不好，因为我的混音器坏了

6
00:00:21,860 --> 00:00:23,630
这意味着我的麦克风音质

7
00:00:23,630 --> 00:00:26,570
会非常差，我非常非常

8
00:00:26,570 --> 00:00:28,849
抱歉，不过还是

9
00:00:28,849 --> 00:00:30,500
让我们开始吧。在这期视频里

10
00:00:30,500 --> 00:00:32,659
我们要在玩家身上

11
00:00:32,659 --> 00:00:34,310
运行一些函数，有两个原因使得这件事很重要

12
00:00:34,310 --> 00:00:35,840
其中之一是我们需要

13
00:00:35,840 --> 00:00:38,300
去理解怎样在不同的数据类型上

14
00:00:38,300 --> 00:00:41,149
执行meta函数

15
00:00:41,149 --> 00:00:42,829
除此以外我们也需要理解

16
00:00:42,829 --> 00:00:44,899
怎样在不同的情况下获得对玩家的引用

17
00:00:44,899 --> 00:00:47,179
我们要做的是

18
00:00:47,179 --> 00:00:49,699
开启单人游戏

19
00:00:49,699 --> 00:00:51,410
如果你还没打开的话

20
00:00:51,410 --> 00:00:53,570
我建议你赶紧跟上，然后

21
00:00:53,570 --> 00:00:55,160
我们打开sublime（你自己的编辑器也可以）

22
00:00:55,160 --> 00:00:57,260
然后打开之前那期视频的lua文件，它保存在

23
00:00:57,260 --> 00:00:59,210
我们GMOD主目录的lua文件夹下

24
00:00:59,210 --> 00:01:02,210
如果你们还记得的话

25
00:01:02,210 --> 00:01:03,140
总之让我们继续

26
00:01:03,140 --> 00:01:04,670
不谈前面的了，我们现在就开始

27
00:01:04,670 --> 00:01:08,210
(又是一段废话)

28
00:01:08,210 --> 00:01:09,620
首先，我们怎样

29
00:01:09,620 --> 00:01:11,750
去获取一个玩家的引用呢

30
00:01:11,750 --> 00:01:13,970
首先我会打开GMOD WIKI

31
00:01:13,970 --> 00:01:16,220
然后搜索local，哦

32
00:01:16,220 --> 00:01:19,040
Localplayer，然后你可以看到

33
00:01:19,040 --> 00:01:20,240
在global底下有个函数

34
00:01:20,240 --> 00:01:21,710
叫localplayer()，注意到

35
00:01:21,710 --> 00:01:23,210
这个函数是橙色的，意味着你只能在

36
00:01:23,210 --> 00:01:25,490
客户端执行这个函数，描述中说这个函数

37
00:01:25,490 --> 00:01:27,200
它会返回执行函数的当前客户端对应的

38
00:01:27,200 --> 00:01:29,030
玩家对象，并且这个函数在

39
00:01:29,030 --> 00:01:30,560
所有实体都被初始化以前，只会返回空(NULL)

40
00:01:30,560 --> 00:01:32,570
在这一期里我们倒是不用

41
00:01:32,570 --> 00:01:34,430
担心这个，上面这句话更重要的

42
00:01:34,430 --> 00:01:36,729
这个函数能返回玩家对象

43
00:01:36,729 --> 00:01:39,020
yes,执行函数的客户端对应的玩家对象

44
00:01:39,020 --> 00:01:41,450
这意味着

45
00:01:41,450 --> 00:01:44,570
它能够返回游戏世界里的

46
00:01:44,570 --> 00:01:45,950
玩家本体，我们可以借此

47
00:01:45,950 --> 00:01:47,149
对玩家做出一系列我们想做的操作，我们现在

48
00:01:47,149 --> 00:01:48,890
创建一个本地变量

49
00:01:48,890 --> 00:01:50,750
叫做ply，令它等于

50
00:01:50,750 --> 00:01:53,180
LocalPlayer()

51
00:01:53,180 --> 00:01:54,740
注意后面要加上()，因为这是唤起一个函数

52
00:01:54,740 --> 00:01:56,390
注意把GMOD

53
00:01:56,390 --> 00:01:58,850
语法高亮打开

54
00:01:58,850 --> 00:02:00,770
(再次废话一下这个是函数，要加())

55
00:02:00,770 --> 00:02:03,439
现在ply就成了

56
00:02:03,439 --> 00:02:05,780
对玩家的一个引用

57
00:02:05,780 --> 00:02:07,490
然后我们再检测一下，打开控制台输入lua_

58
00:02:07,490 --> 00:02:10,220
哦,lua_openscript_cl

59
00:02:10,220 --> 00:02:12,530
注意了请确保你

60
00:02:12,530 --> 00:02:14,960
是在客户端运行的(要加_cl)

61
00:02:14,960 --> 00:02:16,820
因为localplayer()这个函数

62
00:02:16,820 --> 00:02:18,290
不能再服务端执行，我们之前看到了它是个

63
00:02:18,290 --> 00:02:20,060
只能在客户端运行的函数，接着我们运行

64
00:02:20,060 --> 00:02:22,580
你会发现没有任何错误

65
00:02:22,580 --> 00:02:23,370
这很好

66
00:02:23,370 --> 00:02:25,019
然后我们能用它来做什么呢？

67
00:02:25,019 --> 00:02:26,760
让我们回到GMOD WIKI，然后

68
00:02:26,760 --> 00:02:31,379
搜索player:,哦，是player

69
00:02:31,379 --> 00:02:33,659
然后我们可以

70
00:02:33,659 --> 00:02:38,069
点击到classuanxiangka1，然后你能看到

71
00:02:38,069 --> 00:02:40,560
这一系列以Player:(注意冒号)开头的

72
00:02:40,560 --> 00:02:42,810
一大堆函数(译者注:或者说Player类的方法)，让我们

73
00:02:42,810 --> 00:02:46,230
看一个这个Player:Alive函数函数，这个函数被

74
00:02:46,230 --> 00:02:48,540
标记为蓝色和橙色，意味着

75
00:02:48,540 --> 00:02:51,150
服务端和客户端都能执行它，它的作用是检测

76
00:02:51,150 --> 00:02:52,650
一个玩家是否还活着，并返回一个

77
00:02:52,650 --> 00:02:54,239
Boolean类型的结果，值为true(真)或false(假)

78
00:02:54,239 --> 00:02:55,829
表示对应的玩家是活着或死了

79
00:02:55,829 --> 00:02:57,569
让我们回到我们的脚本，我们

80
00:02:57,569 --> 00:03:00,209
继续另起一行，写下print，哦我们首先

81
00:03:00,209 --> 00:03:01,440
还是新建一个变量，我给它命名为

82
00:03:01,440 --> 00:03:04,799
isPlayerAlive，我们唤起

83
00:03:04,799 --> 00:03:06,959
这个函数的方式

84
00:03:06,959 --> 00:03:08,519
就像wiki上写的那样，把冒号前的

85
00:03:08,519 --> 00:03:09,930
Player，换成你想要检测的玩家的引用

86
00:03:09,930 --> 00:03:12,239
然后写下冒号，再写下函数名Alive()对玩家

87
00:03:12,239 --> 00:03:14,579
执行函数，在我们这个脚本里，我们要写

88
00:03:14,579 --> 00:03:18,569
ply:Alive()，请记住，ply是我们获取到的

89
00:03:18,569 --> 00:03:21,870
对客户端本地玩家的一个引用

90
00:03:21,870 --> 00:03:22,920
我们要做的是检测

91
00:03:22,920 --> 00:03:24,390
他是否还活着，并把返回的结果

92
00:03:24,390 --> 00:03:26,250
存储到isPlayerAlive变量里

93
00:03:26,250 --> 00:03:26,790
----------

94
00:03:26,790 --> 00:03:27,989
我们就这样继续

95
00:03:27,989 --> 00:03:30,930
然后把isPlayerAlive这个变量

96
00:03:30,930 --> 00:03:32,880
打印出来，哦不好意思手滑了

97
00:03:32,880 --> 00:03:34,769
我把界面缩小一下，好现在

98
00:03:34,769 --> 00:03:37,160
我调回游戏界面，再次执行这个脚本

99
00:03:37,160 --> 00:03:39,870
你可以看到控制台打印了true

100
00:03:39,870 --> 00:03:41,730
但是如果我把自己处死之后再次执行脚本

101
00:03:41,730 --> 00:03:43,349
对了，打印出来的是false

102
00:03:43,349 --> 00:03:45,900
因为我现在挂了，我希望你理解

103
00:03:45,900 --> 00:03:48,840
不过除此以外

104
00:03:48,840 --> 00:03:51,419
我们还可以做很多很多很多事情

105
00:03:51,419 --> 00:03:53,250
别忘了wiki上

106
00:03:53,250 --> 00:03:56,819
还有好多东西呢

107
00:03:56,819 --> 00:03:59,459
我们继续去看一看其他的函数吧

108
00:03:59,459 --> 00:04:01,410
比如这个蓝色的

109
00:04:01,410 --> 00:04:05,040
kill函数，kill函数只能被

110
00:04:05,040 --> 00:04:07,769
就像这蓝色表明的，它只能

111
00:04:07,769 --> 00:04:09,720
被服务端唤起，这意味着

112
00:04:09,720 --> 00:04:12,930
在客户端，你不能强制处死任何人

113
00:04:12,930 --> 00:04:14,549
从客户端你只能去向服务端发送请求

114
00:04:14,549 --> 00:04:16,949
去处死某人，不过这个机制我们会在

115
00:04:16,949 --> 00:04:19,199
之后的节目里讲到，现在我们要做的是

116
00:04:19,199 --> 00:04:21,539
让我们继续看看其他的

117
00:04:21,539 --> 00:04:24,690
带橙色的函数，比如

118
00:04:24,690 --> 00:04:27,010
这个IsSpeaking函数

119
00:04:27,010 --> 00:04:30,040
它会返回一个true或false的boolean

120
00:04:30,040 --> 00:04:33,910
表示这个玩家是否在开麦克风

121
00:04:33,910 --> 00:04:38,350
我们再看看这个setmuted函数，这个函数能在服务端上

122
00:04:38,350 --> 00:04:41,710
让特定玩家禁言，只要你有...

123
00:04:41,710 --> 00:04:43,240
呃，也可以让其他玩家禁言，只要你有

124
00:04:43,240 --> 00:04:45,340
那个玩家对象的引用就行

125
00:04:45,340 --> 00:04:47,110
然后你就可以对他执行setmute函数，并

126
00:04:47,110 --> 00:04:49,930
传递一个true参数，我们接着看看

127
00:04:49,930 --> 00:04:51,610
Frags这个函数

128
00:04:51,610 --> 00:04:54,160
基本上来说frags就是杀敌数，正如你看到的

129
00:04:54,160 --> 00:04:56,950
我的frags应该是

130
00:04:56,950 --> 00:04:58,870
0，因为计分板上。。。等等

131
00:04:58,870 --> 00:05:00,790
我的frag是-1，因为我

132
00:05:00,790 --> 00:05:02,890
刚刚自杀了一次，我们继续

133
00:05:02,890 --> 00:05:05,440
我们把frags存储在这里，然后

134
00:05:05,440 --> 00:05:11,530
把变量命名为kills,然后

135
00:05:11,530 --> 00:05:13,810
继续把这个变量打印出来

136
00:05:13,810 --> 00:05:16,030
然后我们执行这个脚本

137
00:05:16,030 --> 00:05:17,440
你可以看到打印的结果是-1

138
00:05:17,440 --> 00:05:20,470
我们打开NPC选项卡

139
00:05:20,470 --> 00:05:24,160
然后我们切到武器选项卡

140
00:05:24,160 --> 00:05:28,930
拿一把武器，然后我们把这些

141
00:05:28,930 --> 00:05:31,510
NPC都图了，然后你可以看到

142
00:05:31,510 --> 00:05:34,510
计分板上，哦不

143
00:05:34,510 --> 00:05:35,380
我想的不对

144
00:05:35,380 --> 00:05:37,750
我以为击杀NPC能够增加击杀数

145
00:05:37,750 --> 00:05:40,510
但显然不是这样，所以我还是

146
00:05:40,510 --> 00:05:42,490
\-1分，不过我们还可以

147
00:05:42,490 --> 00:05:45,190
获取我的死亡数，我知道这看起来

148
00:05:45,190 --> 00:05:46,630
有点无聊，但我还是

149
00:05:46,630 --> 00:05:47,980
想要确保你能理解

150
00:05:47,980 --> 00:05:49,300
这一期视频的主旨

151
00:05:49,300 --> 00:05:50,980
我之前死了一次，让我们再死一次

152
00:05:50,980 --> 00:05:53,830
现在我死了两次，然后我还可以……

153
00:05:53,830 --> 00:05:57,280
哦，我还可以，哦不

154
00:05:57,280 --> 00:05:57,550
继续

155
00:05:57,550 --> 00:06:00,570
我现在死了三次(你可以看到脚本输出的也是3)

156
00:06:00,570 --> 00:06:04,540
希望这些对你有用

157
00:06:04,540 --> 00:06:06,910
这期视频大概就到这里了

158
00:06:06,910 --> 00:06:08,440
似乎你们更喜欢长一点的视频

159
00:06:08,440 --> 00:06:11,800
所以我就做的稍微长了些，还有一些内容

160
00:06:11,800 --> 00:06:13,510
我们下期再说吧，我很抱歉

161
00:06:13,510 --> 00:06:14,800
把这些内容留到下期，否则

162
00:06:14,800 --> 00:06:17,170
这个视频就太长了

163
00:06:17,170 --> 00:06:19,060
希望你们能学到

164
00:06:19,060 --> 00:06:21,280
并且理解这些内容

165
00:06:21,280 --> 00:06:23,320
让我们复习一下，本期我们学习了处理

166
00:06:23,320 --> 00:06:26,620
玩家信息的方法，不过在服务端

167
00:06:26,620 --> 00:06:28,210
检测玩家是不太一样的

168
00:06:28,210 --> 00:06:29,890
这就是为什么这期没有做服务端的脚本

169
00:06:29,890 --> 00:06:32,710
不过在客户端你就能轻松

170
00:06:32,710 --> 00:06:35,170
获取客户端对应的玩家

171
00:06:35,170 --> 00:06:36,670
谁开着游戏执行了这个脚本，谁就是

172
00:06:36,670 --> 00:06:38,380
客户端对应的玩家

173
00:06:38,380 --> 00:06:40,210
然后我们把它存储在玩家变量(ply)里

174
00:06:40,210 --> 00:06:42,250
这就建立了一个对该玩家的应用，接着

175
00:06:42,250 --> 00:06:44,950
我们用这个变量呼叫函数Death()

176
00:06:44,950 --> 00:06:46,450
它将会返回玩家的

177
00:06:46,450 --> 00:06:48,670
死亡次数，获取到之后

178
00:06:48,670 --> 00:06:50,080
我们就直接答应出来

179
00:06:50,080 --> 00:06:52,450
希望这些对你有所帮助，下一期视频

180
00:06:52,450 --> 00:06:54,850
我们将会做一些

181
00:06:54,850 --> 00:06:56,290
更复杂的脚本

182
00:06:56,290 --> 00:06:58,210
我再次对觉得这个系列视频太简单的观众

183
00:06:58,210 --> 00:07:01,300
说一声抱歉，因为视频内容

184
00:07:01,300 --> 00:07:04,300
会逐渐变复杂，但对于新人来说

185
00:07:04,300 --> 00:07:05,470
在视频的开头，最好还是

186
00:07:05,470 --> 00:07:07,120
讲清楚最基础的内容

187
00:07:07,120 --> 00:07:08,650
尽管你可能觉得这些内容我永远都不会用到

188
00:07:08,650 --> 00:07:11,020
但这些内容是

189
00:07:11,020 --> 00:07:13,420
GMOD编程的重要基础，所以

190
00:07:13,420 --> 00:07:16,120
我希望你能从中学到一些东西

191
00:07:16,120 --> 00:07:18,100
我们下期视频再见，希望

192
00:07:18,100 --> 00:07:20,460
你看的愉快

193
00:07:25,210 --> 00:07:27,270
1

